<?php

use Drupal\group\Entity\GroupRelationship;

/**
 * implements hook_form_alter()
 */
function digitalia_muni_universal_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
	if (is_null(parseFormIDs()[$form_id])) {
		return;
	}

	$node = \Drupal::routeMatch()->getParameter("node");
	$user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	$group_config = parseGroupConfiguration();
	$node_gids = getGroupIDs($node);
	$user_gids = getGroupIDs($user);
	$all_gids = \Drupal::entityQuery("group")->accessCheck(FALSE)->execute();
	$common_gids = array();
	$allowed_fields = array();
	$fields_to_remove = array();

	foreach($all_gids as $gid) {
		$common_gids[$gid] = 0;
	}

	foreach ($node_gids as $gid) {
		$common_gids[$gid] += 1;
	}

	foreach ($user_gids as $gid) {
		$common_gids[$gid] += 1;
	}

	// gather all allowed fields based on group membership of a node and user
	foreach ($common_gids as $gid => $value) {
		if ($value < 2) {
			continue;
		}

		foreach ($group_config[$gid] as $_index2 => $field_name) {
			$allowed_fields[$field_name] = 0;
		}
	}

	// find fields
	foreach (array_keys($form) as $key) {
		if (str_starts_with($key, "field_")) {
			$fields_to_remove[$key] = 0;
		}
	}

	// remove allowed fields from available fields
	foreach ($allowed_fields as $allowed_key => $_value) {
		unset($fields_to_remove[$allowed_key]);
	}

	// hide fields that are not allowed
	foreach($fields_to_remove as $removed_field => $_value) {
		$form[$removed_field]["#access"] = FALSE;
	}
}

function parseGroupConfiguration()
{
	$group_config = \Drupal::config("digitalia_muni_universal_form.settings")->get("group_field_config");
	$lines = explode("\n", $group_config);
	$parsed = array();

	foreach ($lines as $line) {
		$split = explode("::", $line);
		$fields = explode(",", trim($split[1]));
		$parsed[$split[0]] = $fields;
	}
	
	return $parsed;
}

function parseFormIDs()
{
	$form_config = \Drupal::config("digitalia_muni_universal_form.settings")->get("enabled_form_ids");
	$list = explode(",", trim($form_config));
	$parsed = array();

	foreach ($list as $form_id) {
		$parsed[$form_id] = 0;
	}

	return $parsed;
}

function getGroupIDs($entity)
{
	$gids = [];

	// when node is created, it is not member of any group
	if (is_null($entity)) {
		$group = \Drupal::routeMatch()->getParameter('group');
		return array($group->id());
	}

	$group_contents = GroupRelationship::loadByEntity($entity);

	foreach ($group_contents as $group_content) {
		$gids[] = $group_content->getGroup()->id();
	}

	return $gids;
}
