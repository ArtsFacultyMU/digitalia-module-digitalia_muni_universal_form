<?php

use Drupal\group\Entity\GroupRelationship;

/**
 * implements hook_form_alter()
 */
function digitalia_muni_universal_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
	if (!is_null(parseFormIDs()[$form_id])) {
		alterNodeForm($form, $form_state, $form_id);
	}
}

function parseGroupConfiguration()
{
	$config = \Drupal::config("digitalia_muni_universal_form.settings");
	$node_types = array_keys(\Drupal::service("entity_type.bundle.info")->getAllBundleInfo()["node"]);
	$parsed = array();
	$node = \Drupal::routeMatch()->getParameter("node");

	// node creation page
	if (is_null($node)) {
		$current_path = \Drupal::service('path.current')->getPath();
		$args = explode("/", $current_path);
		//dpm(print_r($current_path, TRUE));
		//dpm(print_r($args, TRUE));
		$type = end(explode(":", end($args)));
	} else {
		$type = $node->bundle();
	}

	//\Drupal::logger("digitalia_muni_universal_form")->debug(is_null($node));

	$group_config = $config->get($type . ".groups");

	return $group_config;
}

function parseFormIDs()
{
	$config = \Drupal::config("digitalia_muni_universal_form.settings");
	$node_types = array_keys(\Drupal::service("entity_type.bundle.info")->getAllBundleInfo()["node"]);
	$parsed = array();

	foreach ($node_types as $node_type) {
		if ($config->get($node_type . ".enabled")) {
			$parsed["node_" . $node_type . "_form"] = 0;
			$parsed["node_" . $node_type . "_edit_form"] = 0;
		}
	}

	return $parsed;
}

function alterNodeForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
	$node = \Drupal::routeMatch()->getParameter("node");
	$user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	$group_config = parseGroupConfiguration();
	$node_gids = getGroupIDs($node);
	$user_gids = getGroupIDs($user);
	$all_gids = \Drupal::entityQuery("group")->accessCheck(FALSE)->execute();
	$common_gids = array();
	$allowed_fields = array();
	$fields_to_remove = array();

	foreach($all_gids as $gid) {
		$common_gids[$gid] = 0;
	}

	foreach ($node_gids as $gid) {
		$common_gids[$gid] += 1;
	}

	foreach ($user_gids as $gid) {
		$common_gids[$gid] += 1;
	}

	// gather all allowed fields based on group membership of a node and user
	foreach ($common_gids as $gid => $value) {
		if ($value < 2) {
			continue;
		}

		foreach ($group_config[$gid] as $field_name => $value) {
			if ($value) {
				$allowed_fields[$field_name] = 0;
			}
		}
	}

	// find fields
	foreach (array_keys($form) as $key) {
		if (str_starts_with($key, "field_")) {
			$fields_to_remove[$key] = 0;
		}
	}

	// remove allowed fields from available fields
	foreach ($allowed_fields as $allowed_key => $_value) {
		unset($fields_to_remove[$allowed_key]);
	}

	// don't want to deal with built in title field
	// ["title"]["#value"] doesn't work for some reason
	$form["title"]['widget'][0]["value"]["#value"] = "n/a";
	$form["title"]["#access"] = FALSE;

	// hide fields that are not allowed
	foreach($fields_to_remove as $removed_field => $_value) {
		$form[$removed_field]["#access"] = FALSE;
	}
}

function getGroupIDs($entity)
{
	$gids = [];

	// when node is created, it is not member of any group
	if (is_null($entity)) {
		$group = \Drupal::routeMatch()->getParameter('group');

		if (is_null($group)) {
			return $gids;
		}

		return array($group->id());
	}

	$group_contents = GroupRelationship::loadByEntity($entity);

	foreach ($group_contents as $group_content) {
		$gids[] = $group_content->getGroup()->id();
	}

	return $gids;
}

function sortReturnSorted(&$array)
{
  \Drupal::logger("TEST")->debug(print_r($array, TRUE));
  sort($array);
  \Drupal::logger("TEST2")->debug(print_r($array, TRUE));
  return $array;
}

//function alterComparisonForm(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
//{
//	$form["platform"] = [
//		"#type" => "textfield",
//		"#title" => "Group name",
//		"#maxlength" => 3,
//		"#default_value" => ,
//		"#required" => FALSE,
//	];
//}
